@page "/uploaddocuments"
@using DMS.Shared.Entities
@using DMS.Client.Models
@inject HttpClient Http

<PageTitle>Upload documents</PageTitle>

<h1>Upload one or more document info on database</h1>

<p>This component allows to add one or more document's information on database.</p>

@if (errors.Count > 0)
{
    <h4>Errors</h4>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@if (documentsToUpload.Count <= 0)
{
    <p><em>No documents to upload</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Type</th>
            <th>Filename</th>
            <th>Insert date</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var document in documentsToUpload)
        {
            <tr>
                <td>@document.DocumentTypeName</td>
                <td>@document.FileName</td>
                <td>@document.InsertDateTime</td>
            </tr>
        }
        </tbody>
    </table>
    <EditForm Model="documentsModel" OnValidSubmit="UploadNewDocuments">
        <button class="btn btn-primary mt-3" type="submit">Upload on database</button>
    </EditForm>
}

<hr style="height: 5px"/>

<h5><i>Add a new document to the list</i></h5>

<EditForm Model="documentModel" OnValidSubmit="AddNewDocument">
    <div>
        <label for="fileName">FileName:</label>
        <InputFile class="form-control" OnChange="@SelectNewDocument" />
    </div>
    <div>
        <label for="documentTypeName">Document type:</label>
        @foreach (var item in new[] { "CONTRATTO", "PREVENTIVO", "REPORT" })
        {
            <div>
                <input type="radio" name="type" id="@item" value="@item"
                       @onchange="RadioSelection"
                       checked=@(RadioValue.Equals(item, StringComparison.OrdinalIgnoreCase))/>
                <label for="@item">@item</label>
            </div>
        }
    </div>
    <button class="btn btn-primary mt-3" type="submit">Add to list</button>
</EditForm>

@code {
    private List<Document> documentsToUpload = new();
    private DocumentModel documentModel = new();
    private DocumentsModel documentsModel = new();
    private List<string> errors = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
    }

    string RadioValue = string.Empty;
    void RadioSelection(ChangeEventArgs args)
    {
        RadioValue = args.Value.ToString();
        documentModel.DocumentTypeName = RadioValue;
    }

    private async Task SelectNewDocument(InputFileChangeEventArgs e)
    {
        documentModel.Document.FileName = e.File.Name;
    }

    private async Task AddNewDocument()
    {
        errors.Clear();

        if (string.IsNullOrEmpty(documentModel.Document.FileName))
            return;

        if (string.IsNullOrEmpty(documentModel.DocumentTypeName))
            return;

        var document = new Document
        {
            DocumentTypeName = documentModel.DocumentTypeName,
            FileName = documentModel.Document.FileName,
            InsertDateTime = DateTime.Now
        };
        documentsToUpload.Add(document);
    }

    private async Task UploadNewDocuments()
    {
        errors.Clear();

        if (documentsToUpload.Count <= 0)
        {
            errors.Add("No documents to upload");
            return;
        }
        
        var report = documentsToUpload.FirstOrDefault(x => x.DocumentTypeName.Equals("REPORT"));

        if (report is null)
        {
            errors.Add("Documents to upload need to include at least one report");
            return;
        }

        var postBody = new {  };

        using var response = await Http.PostAsJsonAsync("https://localhost:7182/api/Documents", postBody);
        var success = await response.Content.ReadFromJsonAsync<bool>();
    }
}
